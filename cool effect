import time
import cv2
import numpy as np

cap = cv2.VideoCapture(1)  # Assuming you want to use the default camera (index 0)
f = None
threshold2 = None
FRAME1 = None
threshold_value = 60
set_reference = False

def on_threshold_change(value):
    global threshold_value
    threshold_value = value

def set_reference_frame():
    global FRAME1
    FRAME1 = f.copy()
    print("Reference frame set.")

# Create a window
cv2.namedWindow('Threshold Slider')

# Create a trackbar for threshold
cv2.createTrackbar('Threshold', 'Threshold Slider', threshold_value, 150, on_threshold_change)


while True:
    ret, frame = cap.read()
    if f is None:
        f = frame.copy()

    if FRAME1 is None:
        FRAME1 = frame.copy()

    gray1 = np.dot(FRAME1[..., :3], [0.299, 0.587, 0.114])
    gray2 = np.dot(f[..., :3], [0.299, 0.587, 0.114])

    diff = np.abs(FRAME1 - f)

    
    threshold = ((diff > threshold_value) & (diff < 2 * threshold_value)).astype(np.uint8)

    # ce qui provient de gray1 doit etre en rouge
    # threshold[gray1 > gray2] = 100

    kernel = np.ones((2, 2), np.uint8)
    threshold = cv2.dilate(threshold, kernel, iterations=1)

    if threshold2 is None:
        threshold2 = threshold.copy()

    if np.all(threshold == 0):
        threshold = threshold2

    threshold2 = threshold
    cv2.imshow('Webcam 1', threshold * 255)

    # frame1 = cv2.add(frame, cv2.cvtColor(threshold * 255, cv2.COLOR_GRAY2BGR))
    # cv2.imshow('contours', frame1)

    f = frame.copy()

    # Check for 'r' key press to set the reference frame
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('r'):
        set_reference_frame()

cap.release()
cv2.destroyAllWindows()
